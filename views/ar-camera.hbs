<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <link rel="shortcut icon" href="/img/logo.png" type="image/png">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Neucha&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/styles/style.css" type="text/css">

  <!--Маркеры и отображение текста-->
  <script src='/scripts/three.js'></script>
  <script src="/scripts/jsartoolkit5/artoolkit.min.js"></script>
  <script src="/scripts/jsartoolkit5/artoolkit.api.js"></script>
  <script src="/scripts/threex/threex-artoolkitsource.js"></script>
  <script src="/scripts/threex/threex-artoolkitcontext.js"></script>
  <script src="/scripts/threex/threex-arbasecontrols.js"></script>
  <script src="/scripts/threex/threex-armarkercontrols.js"></script>
  <title>Квест по станциям</title>


  <meta charset="UTF-8">
  <meta name="keywords" content="квест, квест по станциям, ar">
</head>

<body class="body">


<header class="header">
  <p id="name_of_user" style="margin-left: 15px; margin-right: auto"></p>
  <script src="/scripts/src/nameOfUser.js"></script>

  <h2>Квест по станциям</h2>

  <button id="logoutButton">
    <svg style="cursor: pointer" width="50px" height="50px" viewBox="0 0 1.5 1.5" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M0.625 0.75h0.5m0 0 -0.156 -0.139M1.125 0.75l-0.156 0.139m0.156 -0.444V0.313a0.063 0.063 0 0 0 -0.063 -0.063H0.438a0.063 0.063 0 0 0 -0.063 0.063v0.875a0.063 0.063 0 0 0 0.063 0.063h0.625a0.063 0.063 0 0 0 0.063 -0.063v-0.132" stroke="#464455" stroke-linecap="round" stroke-linejoin="round" stroke-width="0.0625"/></svg>
  </button>
  <script src="/scripts/src/logout.js"></script>
</header>


<main id="main">

  <script>

    var scene, camera, renderer, clock, deltaTime, totalTime;

    var arToolkitSource, arToolkitContext;

    initialize();
    animate();

    function initialize()
    {
      scene = new THREE.Scene();

      let ambientLight = new THREE.AmbientLight( 0xcccccc, 0.5 );
      scene.add( ambientLight );

      camera = new THREE.Camera();
      scene.add(camera);

      const videoElement = document.createElement("video");
      videoElement.style.width = '100%';
      renderer = new THREE.WebGLRenderer({
        antialias : true,
        alpha: true
      });
      renderer.setClearColor(new THREE.Color('lightgrey'), 0)
      renderer.setSize( 640, 480 );
      renderer.domElement.style.position = 'absolute'
      renderer.domElement.style.top = '0px'
      renderer.domElement.style.left = '0px'
      document.getElementById('main').appendChild( renderer.domElement );

      clock = new THREE.Clock();
      deltaTime = 0;
      totalTime = 0;

      ////////////////////////////////////////////////////////////
      // setup arToolkitSource
      ////////////////////////////////////////////////////////////

      arToolkitSource = new THREEx.ArToolkitSource({
        sourceType : 'webcam',
      });

      function onResize()
      {
        arToolkitSource.onResize()
        arToolkitSource.copySizeTo(renderer.domElement)
        if ( arToolkitContext.arController !== null )
        {
          arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)
        }
      }

      arToolkitSource.init(function onReady(){
        onResize()
      });

      // handle resize event
      window.addEventListener('resize', function(){
        onResize()
      });

      ////////////////////////////////////////////////////////////
      // setup arToolkitContext
      ////////////////////////////////////////////////////////////

      // create atToolkitContext
      arToolkitContext = new THREEx.ArToolkitContext({
        cameraParametersUrl: 'data/camera_para.dat',
        detectionMode: 'mono'
      });

      // copy projection matrix to camera when initialization complete
      arToolkitContext.init( function onCompleted(){
        camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );
      });

      ////////////////////////////////////////////////////////////
      // setup markerRoots
      ////////////////////////////////////////////////////////////

      // build markerControls
      const loader = new THREE.FontLoader()


      fetch('/api/stations').then((response) => response.json()).then((data) => {
        const texts = data.map((item) => item.text);
        const patts = data.map((item) => item.markerPath);
        const markerMap = localStorage.getItem('myMap');

        const markerTextMap = new Map(JSON.parse(markerMap));

        for (let i = 0; i < texts.length; i++) {
          let markerRoot1 = new THREE.Group();
          scene.add(markerRoot1);
          let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {
            type: 'pattern',
            patternUrl: patts[i],
          });

          markerControls1.addEventListener('markerFound', function () {
            if (!markerTextMap.get(patts[i]))
            {
              markerTextMap.set(patts[i], true);
              const now = new Date();
              const currentTime = now.toLocaleTimeString();
              const startTime = localStorage.getItem('startTime');
              const time = getTimeDifferenceInSeconds(currentTime, startTime);
              const userId = localStorage.getItem('userId');
              const url = `/api/results/${userId}`;
              const jwtToken = localStorage.getItem('jwtToken');
              const numberOfStations = markerTextMap.size;
              fetch(url, {
                method: 'PUT',
                headers: {
                  'Content-Type': 'application/json',
                  Authorization: `Bearer ${jwtToken}`,
                },
                body: JSON.stringify({ numberOfStations, time })
              })
              localStorage.setItem('myMap', JSON.stringify(Array.from(markerTextMap.entries())));
            }
            loader.load('font/Neucha_Regular.json', function (font) {
              const geometry = new THREE.TextGeometry(texts[i], {
                font: font,
                size: 0.2,
                height: 0.05,
                curveSegments: 12,
                bevelEnabled: false,
                bevelThickness: 0,
                bevelSize: 0,
                bevelOffset: 0,
                bevelSegments: 3,
                width: 2,
              });
              const material = new THREE.MeshPhongMaterial({
                color: 0x737373,
              });

              const mesh = new THREE.Mesh(geometry, material);
              mesh.name = 'text';
              mesh.rotation.x = -Math.PI / 2;
              mesh.position.x -= 0.7;
              mesh.position.y += 0.02;
              mesh.position.z -= 0.3;
              markerRoot1.add(mesh);
            });
          });
        }
      });
    }


    function update()
    {
      if ( arToolkitSource.ready !== false )
        arToolkitContext.update( arToolkitSource.domElement );
    }


    function render()
    {
      renderer.render( scene, camera );
    }


    function animate()
    {
      var video = document.querySelector("video");
      if (video) {
        video.style.width = "100%";
        video.style.removeProperty('height');
        video.style.marginTop = '0';

      }
      var canvas = document.querySelector("canvas");
      if (canvas) {
        canvas.style.width = '100%';
        canvas.style.marginLeft = '0';
        canvas.style.height = '1000px'
        canvas.style.marginTop = '100px';
      }
      requestAnimationFrame(animate);
      deltaTime = clock.getDelta();
      totalTime += deltaTime;
      update();
      render();
    }

  </script>
</main>


<footer class="footer">
  <button class="btn1" onclick="window.location.href = '/results'">Результаты</button>
</footer>
<script>
  function getTimeDifferenceInSeconds(time1, time2) {
    const date1 = new Date(`2000-01-01T${time1}`);
    const date2 = new Date(`2000-01-01T${time2}`);
    const difference = Math.abs(date1 - date2);
    return difference / 1000;
  }
</script>
</body>
</html>