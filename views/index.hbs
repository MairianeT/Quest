<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <link rel="shortcut icon" href="/img/logo.png" type="image/png">
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Neucha&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/styles/style.css" type="text/css">

<!--Маркеры и отображение текста-->
  <script src='/scripts/three.js'></script>
  <script src="/scripts/jsartoolkit5/artoolkit.min.js"></script>
  <script src="/scripts/jsartoolkit5/artoolkit.api.js"></script>
  <script src="/scripts/threex/threex-artoolkitsource.js"></script>
  <script src="/scripts/threex/threex-artoolkitcontext.js"></script>
  <script src="/scripts/threex/threex-arbasecontrols.js"></script>
  <script src="/scripts/threex/threex-armarkercontrols.js"></script>
  <title>Квест по станциям</title>


  <meta charset="UTF-8">
  <meta name="keywords" content="квест, квест по станциям, ar">
</head>

<body class="body">


  <header class="header">
    <h2><a href="/">Квест по станциям</a></h2>
  </header>


<main id="main">

  <script>

    var scene, camera, renderer, clock, deltaTime, totalTime;

    var arToolkitSource, arToolkitContext;

    initialize();
    animate();

    function initialize()
    {
      scene = new THREE.Scene();

      let ambientLight = new THREE.AmbientLight( 0xcccccc, 0.5 );
      scene.add( ambientLight );

      camera = new THREE.Camera();
      scene.add(camera);

      renderer = new THREE.WebGLRenderer({
        antialias : true,
        alpha: true
      });
      renderer.setClearColor(new THREE.Color('lightgrey'), 0)
      renderer.setSize( 640, 480 );
      renderer.domElement.style.position = 'absolute'
      renderer.domElement.style.top = '0px'
      renderer.domElement.style.left = '0px'
      document.getElementById('main').appendChild( renderer.domElement );

      clock = new THREE.Clock();
      deltaTime = 0;
      totalTime = 0;

      ////////////////////////////////////////////////////////////
      // setup arToolkitSource
      ////////////////////////////////////////////////////////////

      arToolkitSource = new THREEx.ArToolkitSource({
        sourceType : 'webcam',
      });

      function onResize()
      {
        arToolkitSource.onResize()
        arToolkitSource.copySizeTo(renderer.domElement)
        if ( arToolkitContext.arController !== null )
        {
          arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)
        }
      }

      arToolkitSource.init(function onReady(){
        onResize()
      });

      // handle resize event
      window.addEventListener('resize', function(){
        onResize()
      });

      ////////////////////////////////////////////////////////////
      // setup arToolkitContext
      ////////////////////////////////////////////////////////////

      // create atToolkitContext
      arToolkitContext = new THREEx.ArToolkitContext({
        cameraParametersUrl: 'data/camera_para.dat',
        detectionMode: 'mono'
      });

      // copy projection matrix to camera when initialization complete
      arToolkitContext.init( function onCompleted(){
        camera.projectionMatrix.copy( arToolkitContext.getProjectionMatrix() );
      });

      ////////////////////////////////////////////////////////////
      // setup markerRoots
      ////////////////////////////////////////////////////////////

      // build markerControls
      const loader = new THREE.FontLoader()
      let texts = ["Идите к B", "Идите к С", "Победа!"]
      let patts = ["data/letterA.patt", "data/letterB.patt", "data/letterC.patt"]
      // build markerControls
      for (let i = 0; i < 3; i++)
      {
        let markerRoot1 = new THREE.Group();
        scene.add(markerRoot1);
        let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoot1, {
          type: 'pattern', patternUrl: patts[i],
        })


        loader.load('font/Neucha_Regular.json', function (font) {
          const geometry = new THREE.TextGeometry(texts[i], {
            font: font,
            size: 0.2,
            height: 0.05,
            curveSegments: 12,
            bevelEnabled: false,
            bevelThickness: 0,
            bevelSize: 0,
            bevelOffset: 0,
            bevelSegments: 3,
          })
          const material = new THREE.MeshFaceMaterial([
            new THREE.MeshPhongMaterial({
              color: 0x000000
            }),
            new THREE.MeshPhongMaterial({
              color: 0xffffff
            }),
          ])

          const mesh = new THREE.Mesh(geometry, material)
          mesh.name = 'text'
          mesh.rotation.x = -Math.PI/2;
          mesh.position.x -= 0.3;
          mesh.position.y += 0.02;
          markerRoot1.add(mesh)
        })
      }
    }




    function update()
    {
      if ( arToolkitSource.ready !== false )
        arToolkitContext.update( arToolkitSource.domElement );
    }


    function render()
    {
      renderer.render( scene, camera );
    }


    function animate()
    {
      requestAnimationFrame(animate);
      deltaTime = clock.getDelta();
      totalTime += deltaTime;
      update();
      render();
    }

  </script>
</main>


<footer class="footer">

</footer>
</body>
</html>